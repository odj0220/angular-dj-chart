import { scaleOrdinal, scaleQuantize } from 'd3-scale';
import { interpolateHcl } from 'd3-interpolate';
import { max, min } from 'd3-array';
import * as dc from 'dc';
const config = dc['config'];
const utils = dc['utils'];
export const ColorMixin = (Base) => class extends Base {
    constructor() {
        super();
        // @ts-ignore
        this._colors = scaleOrdinal(config.defaultColors());
        this._colorAccessor = (d) => this.keyAccessor()(d);
        this._colorCalculator = undefined;
        {
            const chart = this;
            chart.getColor = function (d, i) {
                return chart._colorCalculator ?
                    chart._colorCalculator.call(this, d, i) :
                    chart._colors(chart._colorAccessor.call(this, d, i));
            };
        }
    }
    calculateColorDomain() {
        const newDomain = [min(this.data(), this.colorAccessor()),
            max(this.data(), this.colorAccessor())];
        this._colors.domain(newDomain);
        return this;
    }
    colors(colorScale) {
        if (!arguments.length) {
            return this._colors;
        }
        if (colorScale instanceof Array) {
            this._colors = scaleQuantize().range(colorScale); // deprecated legacy support, note: this fails for ordinal domains
        }
        else {
            this._colors = typeof colorScale === 'function' ? colorScale : utils.constant(colorScale);
        }
        return this;
    }
    ordinalColors(r) {
        return this.colors(scaleOrdinal().range(r));
    }
    linearColors(r) {
        // @ts-ignore
        const scaleLinear = scaleLinear().range(r);
        scaleLinear.interpolate(interpolateHcl);
        const colors = this.colors(scaleLinear);
        return colors;
    }
    colorAccessor(colorAccessor) {
        if (!colorAccessor) {
            return this._colorAccessor;
        }
        this._colorAccessor = colorAccessor;
        return this;
    }
    colorDomain(domain) {
        if (!domain) {
            return this._colors.domain();
        }
        this._colors.domain(domain);
        return this;
    }
    colorCalculator(colorCalculator) {
        if (!colorCalculator) {
            return this._colorCalculator || this.getColor;
        }
        this._colorCalculator = colorCalculator;
        return this;
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sb3ItbWl4aW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9kai1hbmd1bGFyLWNoYXJ0L3NyYy9saWIvYmFzZS9jb2xvci1taXhpbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQWMsWUFBWSxFQUFFLGFBQWEsRUFBQyxNQUFNLFVBQVUsQ0FBQztBQUNsRSxPQUFPLEVBQUMsY0FBYyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDOUMsT0FBTyxFQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUMsTUFBTSxVQUFVLENBQUM7QUFFbEMsT0FBTyxLQUFLLEVBQUUsTUFBTSxJQUFJLENBQUM7QUFDekIsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQzVCLE1BQU0sS0FBSyxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUUxQixNQUFNLENBQUMsTUFBTSxVQUFVLEdBQUcsQ0FBQyxJQUFTLEVBQUUsRUFBRSxDQUFDLEtBQU0sU0FBUSxJQUFJO0lBQ3pEO1FBQ0UsS0FBSyxFQUFFLENBQUM7UUFFUixhQUFhO1FBQ2IsSUFBSSxDQUFDLE9BQU8sR0FBRyxZQUFZLENBQUMsTUFBTSxDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUM7UUFFcEQsSUFBSSxDQUFDLGNBQWMsR0FBRyxDQUFDLENBQU0sRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3hELElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxTQUFTLENBQUM7UUFFbEM7WUFDRSxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUM7WUFDbkIsS0FBSyxDQUFDLFFBQVEsR0FBRyxVQUFVLENBQU0sRUFBRSxDQUFNO2dCQUN2QyxPQUFPLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO29CQUM3QixLQUFLLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDekMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDekQsQ0FBQyxDQUFDO1NBQ0g7SUFDSCxDQUFDO0lBRUQsb0JBQW9CO1FBQ2xCLE1BQU0sU0FBUyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsRUFBRSxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7WUFDdkQsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsRUFBRSxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQy9CLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVELE1BQU0sQ0FBRSxVQUFlO1FBQ3JCLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFO1lBQ3JCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztTQUNyQjtRQUNELElBQUksVUFBVSxZQUFZLEtBQUssRUFBRTtZQUMvQixJQUFJLENBQUMsT0FBTyxHQUFHLGFBQWEsRUFBRSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLGtFQUFrRTtTQUNySDthQUFNO1lBQ0wsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLFVBQVUsS0FBSyxVQUFVLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQztTQUMzRjtRQUNELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVELGFBQWEsQ0FBRSxDQUFNO1FBQ25CLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM5QyxDQUFDO0lBRUQsWUFBWSxDQUFFLENBQU07UUFDbEIsYUFBYTtRQUNiLE1BQU0sV0FBVyxHQUFHLFdBQVcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMzQyxXQUFXLENBQUMsV0FBVyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQ3hDLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDeEMsT0FBTyxNQUFNLENBQUE7SUFDZixDQUFDO0lBRUQsYUFBYSxDQUFFLGFBQW1CO1FBQ2hDLElBQUksQ0FBQyxhQUFhLEVBQUU7WUFDbEIsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDO1NBQzVCO1FBQ0QsSUFBSSxDQUFDLGNBQWMsR0FBRyxhQUFhLENBQUM7UUFDcEMsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQsV0FBVyxDQUFFLE1BQVk7UUFDdkIsSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNYLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQztTQUM5QjtRQUNELElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzVCLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVELGVBQWUsQ0FBRSxlQUFxQjtRQUNwQyxJQUFJLENBQUMsZUFBZSxFQUFFO1lBQ3BCLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixJQUFJLElBQUksQ0FBQyxRQUFRLENBQUM7U0FDL0M7UUFDRCxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsZUFBZSxDQUFDO1FBQ3hDLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztDQUNGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge3NjYWxlTGluZWFyLCBzY2FsZU9yZGluYWwsIHNjYWxlUXVhbnRpemV9IGZyb20gJ2QzLXNjYWxlJztcbmltcG9ydCB7aW50ZXJwb2xhdGVIY2x9IGZyb20gJ2QzLWludGVycG9sYXRlJztcbmltcG9ydCB7bWF4LCBtaW59IGZyb20gJ2QzLWFycmF5JztcblxuaW1wb3J0ICogYXMgZGMgZnJvbSAnZGMnO1xuY29uc3QgY29uZmlnID0gZGNbJ2NvbmZpZyddO1xuY29uc3QgdXRpbHMgPSBkY1sndXRpbHMnXTtcblxuZXhwb3J0IGNvbnN0IENvbG9yTWl4aW4gPSAoQmFzZTogYW55KSA9PiBjbGFzcyBleHRlbmRzIEJhc2Uge1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgc3VwZXIoKTtcblxuICAgIC8vIEB0cy1pZ25vcmVcbiAgICB0aGlzLl9jb2xvcnMgPSBzY2FsZU9yZGluYWwoY29uZmlnLmRlZmF1bHRDb2xvcnMoKSk7XG5cbiAgICB0aGlzLl9jb2xvckFjY2Vzc29yID0gKGQ6IGFueSkgPT4gdGhpcy5rZXlBY2Nlc3NvcigpKGQpO1xuICAgIHRoaXMuX2NvbG9yQ2FsY3VsYXRvciA9IHVuZGVmaW5lZDtcblxuICAgIHtcbiAgICAgIGNvbnN0IGNoYXJ0ID0gdGhpcztcbiAgICAgIGNoYXJ0LmdldENvbG9yID0gZnVuY3Rpb24gKGQ6IGFueSwgaTogYW55KSB7XG4gICAgICAgIHJldHVybiBjaGFydC5fY29sb3JDYWxjdWxhdG9yID9cbiAgICAgICAgICBjaGFydC5fY29sb3JDYWxjdWxhdG9yLmNhbGwodGhpcywgZCwgaSkgOlxuICAgICAgICAgIGNoYXJ0Ll9jb2xvcnMoY2hhcnQuX2NvbG9yQWNjZXNzb3IuY2FsbCh0aGlzLCBkLCBpKSk7XG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIGNhbGN1bGF0ZUNvbG9yRG9tYWluICgpIHtcbiAgICBjb25zdCBuZXdEb21haW4gPSBbbWluKHRoaXMuZGF0YSgpLCB0aGlzLmNvbG9yQWNjZXNzb3IoKSksXG4gICAgICBtYXgodGhpcy5kYXRhKCksIHRoaXMuY29sb3JBY2Nlc3NvcigpKV07XG4gICAgdGhpcy5fY29sb3JzLmRvbWFpbihuZXdEb21haW4pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgY29sb3JzIChjb2xvclNjYWxlOiBhbnkpIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9jb2xvcnM7XG4gICAgfVxuICAgIGlmIChjb2xvclNjYWxlIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgIHRoaXMuX2NvbG9ycyA9IHNjYWxlUXVhbnRpemUoKS5yYW5nZShjb2xvclNjYWxlKTsgLy8gZGVwcmVjYXRlZCBsZWdhY3kgc3VwcG9ydCwgbm90ZTogdGhpcyBmYWlscyBmb3Igb3JkaW5hbCBkb21haW5zXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2NvbG9ycyA9IHR5cGVvZiBjb2xvclNjYWxlID09PSAnZnVuY3Rpb24nID8gY29sb3JTY2FsZSA6IHV0aWxzLmNvbnN0YW50KGNvbG9yU2NhbGUpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIG9yZGluYWxDb2xvcnMgKHI6IGFueSkge1xuICAgIHJldHVybiB0aGlzLmNvbG9ycyhzY2FsZU9yZGluYWwoKS5yYW5nZShyKSk7XG4gIH1cblxuICBsaW5lYXJDb2xvcnMgKHI6IGFueSkge1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBjb25zdCBzY2FsZUxpbmVhciA9IHNjYWxlTGluZWFyKCkucmFuZ2Uocik7XG4gICAgc2NhbGVMaW5lYXIuaW50ZXJwb2xhdGUoaW50ZXJwb2xhdGVIY2wpO1xuICAgIGNvbnN0IGNvbG9ycyA9IHRoaXMuY29sb3JzKHNjYWxlTGluZWFyKTtcbiAgICByZXR1cm4gY29sb3JzXG4gIH1cblxuICBjb2xvckFjY2Vzc29yIChjb2xvckFjY2Vzc29yPzogYW55KSB7XG4gICAgaWYgKCFjb2xvckFjY2Vzc29yKSB7XG4gICAgICByZXR1cm4gdGhpcy5fY29sb3JBY2Nlc3NvcjtcbiAgICB9XG4gICAgdGhpcy5fY29sb3JBY2Nlc3NvciA9IGNvbG9yQWNjZXNzb3I7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBjb2xvckRvbWFpbiAoZG9tYWluPzogYW55KSB7XG4gICAgaWYgKCFkb21haW4pIHtcbiAgICAgIHJldHVybiB0aGlzLl9jb2xvcnMuZG9tYWluKCk7XG4gICAgfVxuICAgIHRoaXMuX2NvbG9ycy5kb21haW4oZG9tYWluKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGNvbG9yQ2FsY3VsYXRvciAoY29sb3JDYWxjdWxhdG9yPzogYW55KSB7XG4gICAgaWYgKCFjb2xvckNhbGN1bGF0b3IpIHtcbiAgICAgIHJldHVybiB0aGlzLl9jb2xvckNhbGN1bGF0b3IgfHwgdGhpcy5nZXRDb2xvcjtcbiAgICB9XG4gICAgdGhpcy5fY29sb3JDYWxjdWxhdG9yID0gY29sb3JDYWxjdWxhdG9yO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG59O1xuIl19