import * as d3 from 'd3';
import { CoordinateGridMixin } from '../base/coordinate-grid-mixin';
export declare class MultiChart extends CoordinateGridMixin {
    private _gap;
    private MIN_BAR_WIDTH;
    private _centerBar;
    private _symbol;
    private _click;
    private _dashStyle;
    private _defined;
    private _barWidth;
    private _locator;
    private _annotateLocation;
    private _highlightedSize;
    private _symbolSize;
    private _excludedSize;
    private _excludedColor;
    private _excludedOpacity;
    private __filter;
    private _emptySize;
    private _filtered;
    private _existenceAccessor;
    private lines;
    private originalKeyAccessor;
    private multiOption;
    _tooltip: any;
    x: any;
    _x: any;
    y: any;
    g: any;
    brush: any;
    _widthCalc: any;
    redrawBrush: any;
    redrawGroup: any;
    filter: any;
    round: any;
    label: any;
    title: any;
    svg: any;
    data: any;
    group: any;
    width: any;
    onClick: any;
    getColor: any;
    selectAll: any;
    xAxisLength: any;
    chartBodyG: any;
    xUnitCount: any;
    renderLabel: any;
    yAxisHeight: any;
    margins: any;
    isOrdinal: any;
    _groupName: any;
    _groupScale: any;
    keyAccessor: any;
    valueAccessor: any;
    colorAccessor: any;
    yOriginalDomain: any;
    transitionDuration: any;
    transitionDelay: any;
    constructor(element?: any, option?: any);
    _filter(filter?: any): any;
    plotData(zoomX?: any, zoomY?: any): void;
    click(click?: any): this | null;
    defined(defined?: any): any;
    dashStyle(dashStyle?: any): any;
    renderYAxisLabel(axisClass?: any, text?: any, rotation?: any, labelXPosition?: any): void;
    renderYAxisAt(axisClass: any, axis: any, position: any): any;
    private drawChart;
    barPadding(barPadding?: any): any;
    private calculateBarWidth;
    private drawLine;
    private colors2;
    private safeD;
    private renderSymbol;
    private barHeight;
    private drawArea;
    private renderLabels;
    private renderThermal;
    private renderBars;
    private stepLine;
    symbol(type?: any): this | ((this: any, d: any, ...args: any[]) => d3.SymbolType);
    excludedColor(excludedColor?: any): this | null;
    excludedOpacity(excludedOpacity?: any): number | this;
    private resizeSymbolsWhere;
    extendBrush(): any;
    brushIsEmpty(extent: any): any;
    _brushing(): void;
    private getTooltipElem;
}
