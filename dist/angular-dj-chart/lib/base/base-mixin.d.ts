export declare class BaseMixin {
    __dcFlag__: number;
    _dimension: undefined;
    _group: undefined;
    _groupName: any;
    _anchor: string | undefined;
    _root: any;
    _svg: any;
    _isChild: boolean | undefined;
    _minWidth: number;
    _defaultWidthCalc: any;
    _widthCalc: any;
    _minHeight: number;
    _defaultHeightCalc: any;
    _heightCalc: any;
    _width: any;
    _height: any;
    _useViewBoxResizing: boolean;
    _keyAccessor: import("dc").Accessor<any, any>;
    _valueAccessor: import("dc").Accessor<any, any>;
    _label: import("dc").Accessor<any, any>;
    _ordering: import("dc").Accessor<any, any>;
    _renderLabel: boolean;
    _title: any;
    _renderTitle: any;
    _controlsUseVisibility: boolean;
    _transitionDuration: number;
    _transitionDelay: number;
    _filterPrinter: (filters: any[]) => string;
    _mandatoryAttributesList: any;
    _chartGroup: string;
    _listeners: any;
    _legend: any;
    _commitHandler: any;
    _defaultData: any;
    _data: any;
    _filters: any[];
    _filterHandler: (dimension: any, filters: any[]) => any[];
    _hasFilterHandler: (filters: any[], filter: any) => boolean;
    _removeFilterHandler: (filters: any[], filter: any) => any[];
    _addFilterHandler: (filters: any[], filter: any) => any[];
    _resetFilterHandler: (filters: any[]) => never[];
    constructor();
    height(height?: any): any;
    width(width?: any): any;
    minWidth(minWidth?: any): number | this;
    minHeight(minHeight?: any): number | this;
    useViewBoxResizing(useViewBoxResizing?: any): boolean | this;
    dimension(dimension?: any): this | undefined;
    data(callback?: any): any;
    group(group?: any, name?: string): this | undefined;
    ordering(orderFunction?: any): import("dc").Accessor<any, any> | this;
    _computeOrderedGroups(data: any): unknown[];
    filterAll(): any;
    select(sel: any): any;
    selectAll(sel: any): any;
    anchor(parent?: any, chartGroup?: any): string | this | undefined;
    anchorName(): any;
    root(rootElement?: any): any;
    svg(svgElement?: any): any;
    resetSvg(): any;
    sizeSvg(): void;
    generateSvg(): any;
    filterPrinter(filterPrinterFunction?: any): ((filters: any[]) => string) | this;
    controlsUseVisibility(controlsUseVisibility?: any): boolean | this;
    turnOnControls(): this;
    turnOffControls(): this;
    transitionDuration(duration?: any): number | this;
    transitionDelay(delay?: any): number | this;
    _mandatoryAttributes(_?: any): any;
    checkForMandatoryAttributes(a: string): void;
    render(): this;
    _activateRenderlets(event: any): void;
    redraw(): this;
    commitHandler(commitHandler?: any): any;
    redrawGroup(): this;
    renderGroup(): this;
    _invokeFilteredListener(f: any): void;
    _invokeZoomedListener(): void;
    hasFilterHandler(hasFilterHandler?: any): ((filters: any[], filter: any) => boolean) | this;
    hasFilter(filter?: any): boolean;
    removeFilterHandler(removeFilterHandler?: any): ((filters: any[], filter: any) => any[]) | this;
    addFilterHandler(addFilterHandler: any): ((filters: any[], filter: any) => any[]) | this;
    resetFilterHandler(resetFilterHandler: any): ((filters: any[]) => never[]) | this;
    applyFilters(filters: any): any;
    replaceFilter(filter: any): this;
    filter(filter?: any): any;
    filters(): any[];
    highlightSelected(e: any): void;
    fadeDeselected(e: any): void;
    resetHighlight(e: any): void;
    onClick(datum?: any, i?: any): void;
    filterHandler(filterHandler: any): ((dimension: any, filters: any[]) => any[]) | this;
    _doRender(): this;
    _doRedraw(): this;
    legendables(): never[];
    legendHighlight(): void;
    legendReset(): void;
    legendToggle(): void;
    isLegendableHidden(): boolean;
    keyAccessor(keyAccessor?: any): import("dc").Accessor<any, any> | this;
    valueAccessor(valueAccessor?: any): import("dc").Accessor<any, any> | this;
    label(labelFunction: any, enableLabels: any): import("dc").Accessor<any, any> | this;
    renderLabel(renderLabel: any): boolean | this;
    title(titleFunction: any): any;
    renderTitle(renderTitle: string): any;
    chartGroup(chartGroup?: any): string | this;
    expireCache(): this;
    legend(legend?: any): any;
    chartID(): number;
    options(opts: any): this;
    on(event: any, listener: any): this;
    renderlet(renderletFunction: any): this;
}
