declare const CoordinateGridMixin_base: {
    new (): {
        [x: string]: any;
        calculateColorDomain(): any;
        colors(colorScale: any): any;
        ordinalColors(r: any): any;
        linearColors(r: any): any;
        colorAccessor(colorAccessor?: any): any;
        colorDomain(domain?: any): any;
        colorCalculator(colorCalculator?: any): any;
    };
    [x: string]: any;
};
export declare class CoordinateGridMixin extends CoordinateGridMixin_base {
    on: any;
    svg: any;
    root: any;
    data: any;
    width: any;
    height: any;
    redraw: any;
    colors: any;
    margins: any;
    anchorName: any;
    keyAccessor: any;
    valueAccessor: any;
    effectiveWidth: any;
    effectiveHeight: any;
    transitionDelay: any;
    transitionDuration: any;
    replaceFilter: any;
    redrawGroup: any;
    resetSvg: any;
    _invokeZoomedListener: any;
    _computeOrderedGroups: any;
    _mandatoryAttributes: any;
    _parent: any;
    _g: any;
    _chartBodyG: any;
    _x: any;
    _origX: any;
    _xOriginalDomain: any;
    _xAxis: any;
    _xUnits: any;
    _xAxisPadding: any;
    _xAxisPaddingUnit: any;
    _xElasticity: any;
    _xAxisLabel: any;
    _xAxisLabelPadding: any;
    _lastXDomain: any;
    _y: any;
    _yAxis: any;
    _yAxisPadding: any;
    _yElasticity: any;
    _yAxisLabel: any;
    _yAxisLabelPadding: any;
    _brush: any;
    _gBrush: any;
    _brushOn: any;
    _parentBrushOn: any;
    _round: any;
    _renderHorizontalGridLine: any;
    _renderVerticalGridLine: any;
    _resizing: any;
    _unitCount: any;
    _zoomScale: any;
    _zoomOutRestrict: any;
    _zoom: any;
    _nullZoom: any;
    _hasBeenMouseZoomable: any;
    _rangeChart: any;
    _focusChart: any;
    _mouseZoomable: any;
    _clipPadding: any;
    _fOuterRangeBandPadding: any;
    _fRangeBandPadding: any;
    _useRightYAxis: any;
    constructor();
    rescale(): this;
    resizing(resizing?: any): any;
    rangeChart(rangeChart?: any): any;
    zoomScale(extent?: any): any;
    zoomOutRestrict(zoomOutRestrict?: any): any;
    _generateG(parent?: any): any;
    g(gElement?: any): any;
    mouseZoomable(mouseZoomable?: any): any;
    chartBodyG(chartBodyG?: any): any;
    x(xScale?: any): any;
    xOriginalDomain(): any;
    xUnits(xUnits?: any): any;
    xAxis(xAxis?: any): any;
    elasticX(elasticX?: any): any;
    xAxisPadding(padding?: any): any;
    xAxisPaddingUnit(unit?: any): any;
    xUnitCount(): any;
    useRightYAxis(useRightYAxis?: any): any;
    isOrdinal(): boolean;
    _useOuterPadding(): boolean;
    _ordinalXDomain(): any;
    _prepareXAxis(g: any, render: any): void;
    renderXAxis(g: any): void;
    _renderVerticalGridLines(g: any): void;
    _xAxisY(): number;
    xAxisLength(): any;
    xAxisLabel(labelText?: any, padding?: any): any;
    _createYAxis(): import("d3-axis").Axis<import("d3-axis").AxisDomain>;
    _prepareYAxis(g: any): void;
    renderYAxisLabel(axisClass?: any, text?: any, rotation?: any, labelXPosition?: any): void;
    renderYAxisAt(axisClass: any, axis: any, position: any): void;
    renderYAxis(g?: any): void;
    _renderHorizontalGridLinesForAxis(g: any, scale: any, axis: any): void;
    _yAxisX(): any;
    yAxisLabel(labelText?: any, padding?: any): any;
    y(yScale?: any): any;
    yAxis(yAxis?: any): any;
    elasticY(elasticY?: any): any;
    renderHorizontalGridLines(renderHorizontalGridLines?: any): any;
    renderVerticalGridLines(renderVerticalGridLines?: any): any;
    xAxisMin(): number | Date;
    xAxisMax(): number | Date;
    yAxisMin(): number | Date;
    yAxisMax(): number | Date;
    yAxisPadding(padding?: any): any;
    yAxisHeight(): any;
    round(round?: any): any;
    _rangeBandPadding(_?: any): any;
    _outerRangeBandPadding(_?: any): any;
    filter(_?: any): any;
    brush(_?: any): any;
    renderBrush(g: any, doTransition: any): void;
    createBrushHandlePaths(gBrush?: any, option?: any): void;
    extendBrush(brushSelection: any): any;
    brushIsEmpty(brushSelection: any): boolean;
    _brushing(): void;
    applyBrushSelection(rangedFilter: any): void;
    setBrushExtents(doTransition?: any): void;
    redrawBrush(brushSelection: any, doTransition: any): void;
    fadeDeselectedArea(brushSelection: any): void;
    resizeHandlePath(d: any): string;
    _getClipPathId(): string;
    clipPadding(padding?: any): any;
    _generateClipPath(): void;
    _preprocessData(): void;
    _doRender(): this;
    _doRedraw(): this;
    _drawChart(render: any): void;
    _configureMouseZoom(): void;
    _enableMouseZoom(): void;
    _disableMouseZoom(): void;
    _zoomHandler(newDomain: any, noRaiseEvents: any): void;
    _domainToZoomTransform(newDomain: any, origDomain: any, xScale: any): import("d3-zoom").ZoomTransform;
    _updateD3zoomTransform(): void;
    _onZoom(): void;
    _checkExtents(ext: any, outerLimits: any): any;
    focus(range: any, noRaiseEvents: any): void;
    refocused(): boolean;
    focusChart(c?: any): any;
    brushOn(brushOn?: any): any;
    parentBrushOn(brushOn?: any): any;
    gBrush(): any;
    _hasRangeSelected(range: any): boolean;
}
export {};
