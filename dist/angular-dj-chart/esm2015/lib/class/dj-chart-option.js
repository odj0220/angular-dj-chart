import * as _moment from 'moment';
import * as d3 from 'd3';
import * as _ from 'lodash';
import { AxisOption } from './axis-option';
const moment = _moment;
var DjChartType;
(function (DjChartType) {
    DjChartType["PIE_CHART"] = "pieChart";
    DjChartType["CLOUD_CHART"] = "cloudChart";
    DjChartType["COMPOSITE"] = "composite";
    DjChartType["HEATMAP"] = "heatmap";
    DjChartType["DC_CHART"] = "dcChart";
    DjChartType["STACKED_BAR"] = "stackedBar";
})(DjChartType || (DjChartType = {}));
var AxisOptionType;
(function (AxisOptionType) {
    AxisOptionType["DATE"] = "date";
    AxisOptionType["LINEAR"] = "linear";
    AxisOptionType["ORDINAL"] = "ordinal"; // x축을 있는 그대로 표기할때 사용
})(AxisOptionType || (AxisOptionType = {}));
export class DjChartOption {
    constructor(chartOption) {
        this.elasticLeftMargin = true;
        this.elasticRightMargin = true;
        this._legendObj = {};
        const defaultOption = {
            cloudChart: ['type', 'onClick', 'onClickEvent', 'onFilterChanged', 'legends', 'colors', 'padding', 'dimension', 'group', 'tooltip'],
            pieChart: ['type', 'onClick', 'onClickEvent', 'onFilterChanged', 'legends', 'colors', 'slicesCap', 'slicesPercent', 'radius',
                'externalLabels', 'innerRadius', 'dimension', 'group', 'tooltip'],
            composite: ['type', 'onClick', 'onClickEvent', 'onFilterChanged', 'legends', 'colors', 'seriesTypes', 'yAxisOptions', 'yAxisLabel',
                'xAxisOption', 'xAxisLabel', 'dimension', 'group', 'tooltip', 'seriesOptions', 'margins', 'highlight', 'elasticLeftMargin',
                'elasticRightMargin']
        };
        if (chartOption && chartOption.type) {
            // @ts-ignore
            if (defaultOption[chartOption.type]) {
                // @ts-ignore
                defaultOption[chartOption.type].forEach(field => {
                    // @ts-ignore
                    if (chartOption[field] !== undefined) {
                        // @ts-ignore
                        this[field] = chartOption[field];
                    }
                });
            }
            if (chartOption.type === DjChartType.DC_CHART) {
                Object.keys(chartOption).forEach(key => {
                    // @ts-ignore
                    this[key] = chartOption[key];
                });
            }
            if (chartOption.data) {
                this.setData(chartOption.data);
            }
        }
    }
    setData(data) {
        if (this.type === DjChartType.COMPOSITE && this.xAxisOption && this.xAxisOption.type === 'date') {
            this.data = data;
            this.data.forEach((d) => {
                // @ts-ignore
                d.key[1] = moment(d.key[1], this.xAxisOption.dateFormat).toDate();
            });
        }
        else {
            this.data = data;
        }
    }
    setAxisOption() {
        if (this.yAxisOptions) {
            let data;
            const seriesTypes = this.seriesTypes || {};
            const axisOption = [];
            if (this.data !== undefined) {
                data = this.data;
            }
            else {
                data = this.group().all();
            }
            this.yAxisOptions.forEach(axis => {
                // @ts-ignore
                const filterData = data.filter((d) => {
                    if (axis.keys.indexOf(d.key[0]) > -1) {
                        return true;
                    }
                });
                const max = d3.max(filterData, d => d.value);
                const min = d3.min(filterData, d => d.value) || 0;
                axis.keys.forEach((key, i) => {
                    const _option = {
                        axisLabel: axis.axisLabel,
                        domain: axis.domain ? axis.domain : [min, max],
                        hide: i,
                        series: key,
                        type: seriesTypes[key] || 'line',
                        size: axis.size || 6,
                    };
                    if (this.seriesOptions && this.seriesOptions[key]) {
                        Object.keys(this.seriesOptions[key]).forEach(op => {
                            // @ts-ignore
                            _option[op] = this.seriesOptions[key][op];
                        });
                    }
                    if (this.colors && this.colors[key]) {
                        _option['color'] = this.colors[key];
                    }
                    if (axis.prevTickText || axis.nextTickText) {
                        _option['tickFormat'] = (d) => {
                            let tick = '';
                            if (axis.prevTickText) {
                                tick += axis.prevTickText;
                            }
                            tick += this.commaSeparateNumber(d) || 0;
                            if (axis.nextTickText) {
                                tick += axis.nextTickText;
                            }
                            return tick;
                        };
                    }
                    if (axis.tickFormat) {
                        _option['tickFormat'] = axis.tickFormat;
                    }
                    axisOption.push(new AxisOption(_option));
                });
            });
            return this.axisOption = axisOption;
        }
        return this.axisOption = [];
    }
    getKeys() {
        const keys = this.data.map((d) => {
            if (Array.isArray(d.key)) {
                return d.key[0];
            }
            return d.key;
        });
        return _.uniq(keys);
    }
    getLegends() {
        if (!this._legendObj) {
            this.setLegendObj();
        }
        return this._legendObj;
    }
    setFilters(filters) {
        this.setLegendObj();
    }
    filterAll() {
        this.chart.filterAll();
    }
    setLegendObj() {
        this._legendObj = [];
        this.getKeys().forEach(key => {
            const legend = {
                key: key,
                // @ts-ignore
                name: this.legends[key] || key,
                filter: () => this.chart.filter(key),
                color: () => {
                    const defaultColor = this.chart.getColor(key);
                    // @ts-ignore
                    return this.colors ? this.colors[key] || defaultColor : defaultColor;
                }
            };
            this._legendObj.push(legend);
        });
    }
    commaSeparateNumber(value) {
        if (!value) {
            return '';
        }
        while (/(\d+)(\d{3})/.test(value.toString())) {
            value = value.toString().replace(/(\d)(?=(\d\d\d)+(?!\d))/g, '$1,');
        }
        return value;
    }
}
//# sourceMappingURL=data:application/json;base64,